### Estructura de archivos y carpetas ###
.
├── .env.example
├── .eslintrc.js
├── .github
│   └── workflows
│       └── generate_context.yml
├── .gitignore
├── .prettierrc
├── .vscode
│   ├── extensions.json
│   └── settings.json
├── README.md
├── contexto_repo.txt
├── database
│   └── migrations
│       ├── 1715004771671-CreatePermissionsTable.ts
│       ├── 1715004780671-CreateRolesTable.ts
│       ├── 1715004780681-CreatePermissionRoleTable.ts
│       ├── 1715004781671-CreateUsersTable.ts
│       ├── 1715004781771-CreateRoleUserTable.ts
│       └── 1715004781772-CreatePermissionUserTable.ts
├── docker-compose.yml
├── nest-cli.json
├── ormconfig.ts
├── package.json
├── src
│   ├── app.module.ts
│   ├── common
│   │   ├── adapters
│   │   │   ├── configuration
│   │   │   │   ├── domain
│   │   │   │   │   ├── configs
│   │   │   │   │   │   ├── app-config.type.ts
│   │   │   │   │   │   ├── database-config.type.ts
│   │   │   │   │   │   ├── index.ts
│   │   │   │   │   │   ├── jwt-config.type.ts
│   │   │   │   │   │   └── type-orm-config.type.ts
│   │   │   │   │   ├── configuration.type.ts
│   │   │   │   │   └── index.ts
│   │   │   │   ├── index.ts
│   │   │   │   └── infrastructure
│   │   │   │       ├── configs
│   │   │   │       │   ├── app.config.ts
│   │   │   │       │   ├── database.config.ts
│   │   │   │       │   ├── index.ts
│   │   │   │       │   ├── jwt.config.ts
│   │   │   │       │   └── type-orm.config.ts
│   │   │   │       ├── configuration.module.ts
│   │   │   │       ├── configuration.service.ts
│   │   │   │       └── index.ts
│   │   │   ├── database
│   │   │   │   ├── index.ts
│   │   │   │   └── infrastructure
│   │   │   │       ├── database.module.ts
│   │   │   │       ├── index.ts
│   │   │   │       └── typeorm-config.service.ts
│   │   │   ├── exception
│   │   │   │   ├── domain
│   │   │   │   │   ├── exception-providers.enum.ts
│   │   │   │   │   ├── exeption-service.interface.ts
│   │   │   │   │   ├── format-exception-message.interface.ts
│   │   │   │   │   ├── index.ts
│   │   │   │   │   └── internal-error-message.interface.ts
│   │   │   │   ├── index.ts
│   │   │   │   └── infrastructure
│   │   │   │       ├── custom-exceptions
│   │   │   │       │   ├── bad-request-custom.exception.ts
│   │   │   │       │   ├── base-custom.exception.ts
│   │   │   │       │   ├── forbidden-custom.exception.ts
│   │   │   │       │   ├── index.ts
│   │   │   │       │   ├── internal-server-error-custom.exception.ts
│   │   │   │       │   └── unauthorized-custom.exception.ts
│   │   │   │       ├── exception.module.ts
│   │   │   │       ├── exception.service.ts
│   │   │   │       ├── filters
│   │   │   │       │   ├── all-exception.filter.ts
│   │   │   │       │   ├── base-custom-exception.filter.ts
│   │   │   │       │   ├── index.ts
│   │   │   │       │   └── validation-exception.filter.ts
│   │   │   │       └── index.ts
│   │   │   ├── hash
│   │   │   │   ├── domain
│   │   │   │   │   ├── hash-providers.enum.ts
│   │   │   │   │   ├── hash-service.interface.ts
│   │   │   │   │   └── index.ts
│   │   │   │   ├── index.ts
│   │   │   │   └── infrastructure
│   │   │   │       ├── hash-bcrypt.service.ts
│   │   │   │       ├── hash.module.ts
│   │   │   │       └── index.ts
│   │   │   ├── index.ts
│   │   │   ├── logger
│   │   │   │   ├── domain
│   │   │   │   │   ├── index.ts
│   │   │   │   │   ├── logger-providers.enum.ts
│   │   │   │   │   ├── logger-service.interface.ts
│   │   │   │   │   └── logger.type.ts
│   │   │   │   ├── index.ts
│   │   │   │   └── infrastructure
│   │   │   │       ├── index.ts
│   │   │   │       ├── logger.module.ts
│   │   │   │       └── logger.service.ts
│   │   │   └── token
│   │   │       ├── domain
│   │   │       │   ├── index.ts
│   │   │       │   ├── token-payload.type.ts
│   │   │       │   ├── token-providers.enum.ts
│   │   │       │   └── token-service.interface.ts
│   │   │       ├── index.ts
│   │   │       └── infrastructure
│   │   │           ├── index.ts
│   │   │           ├── jwt-config.service.ts
│   │   │           ├── strategies
│   │   │           │   ├── index.ts
│   │   │           │   └── jwt-passport.strategy.ts
│   │   │           ├── token-jwt.service.ts
│   │   │           └── token.module.ts
│   │   ├── helpers
│   │   │   ├── application
│   │   │   │   ├── general-policy.helper.ts
│   │   │   │   ├── index.ts
│   │   │   │   ├── paginated-resource.helper.ts
│   │   │   │   └── paginated-resource.precenter.ts
│   │   │   ├── domain
│   │   │   │   ├── enums
│   │   │   │   │   ├── filter-rule.enum.ts
│   │   │   │   │   ├── general-statuses.enum.ts
│   │   │   │   │   └── index.ts
│   │   │   │   ├── index.ts
│   │   │   │   ├── interfaces
│   │   │   │   │   ├── base-use-case.interface.ts
│   │   │   │   │   ├── error.interface.ts
│   │   │   │   │   └── index.ts
│   │   │   │   └── types
│   │   │   │       ├── filtering.type.ts
│   │   │   │       ├── find-all-fields.dto.ts
│   │   │   │       ├── find-one-by-fields.dto.ts
│   │   │   │       ├── index.ts
│   │   │   │       ├── paginated-resource.type.ts
│   │   │   │       ├── pagination.type.ts
│   │   │   │       ├── prop-values.type.ts
│   │   │   │       ├── response-format.type.ts
│   │   │   │       ├── response.type.ts
│   │   │   │       └── sorting.type.ts
│   │   │   ├── index.ts
│   │   │   └── infrastructure
│   │   │       ├── decorators
│   │   │       │   ├── filtering-params.decorator.ts
│   │   │       │   ├── index.ts
│   │   │       │   ├── pagination-params.decorator.ts
│   │   │       │   ├── request-id.decorator.ts
│   │   │       │   └── sorting-params.decorator.ts
│   │   │       ├── get-order-type-orm.helper.ts
│   │   │       ├── get-where-type-orm.helper.ts
│   │   │       ├── index.ts
│   │   │       ├── interceptors
│   │   │       │   ├── index.ts
│   │   │       │   ├── logging.Interceptor.ts
│   │   │       │   └── response.interceptor.ts
│   │   │       └── middlewares
│   │   │           ├── index.ts
│   │   │           └── request-id.middleware.ts
│   │   └── index.ts
│   ├── main.ts
│   ├── modules
│   │   ├── auth
│   │   │   ├── application
│   │   │   │   ├── index.ts
│   │   │   │   └── sign-in.use-case.ts
│   │   │   ├── domain
│   │   │   │   ├── enums
│   │   │   │   │   ├── auth-errors.codes.ts
│   │   │   │   │   ├── auth-usecases.enum.ts
│   │   │   │   │   └── index.ts
│   │   │   │   ├── index.ts
│   │   │   │   ├── interfaces
│   │   │   │   │   ├── index.ts
│   │   │   │   │   └── sign-in-use-case.interface.ts
│   │   │   │   └── types
│   │   │   │       ├── auth-user.type.ts
│   │   │   │       ├── auth.type.ts
│   │   │   │       ├── index.ts
│   │   │   │       └── sign-in.type.ts
│   │   │   └── infrastructure
│   │   │       ├── api
│   │   │       │   ├── index.ts
│   │   │       │   └── sign-in.controller.ts
│   │   │       ├── auth.module.ts
│   │   │       ├── decorators
│   │   │       │   ├── auth.decorator.ts
│   │   │       │   ├── get-auth-user.decorator.ts
│   │   │       │   ├── index.ts
│   │   │       │   └── permission-protected.decorator.ts
│   │   │       ├── dto
│   │   │       │   ├── index.ts
│   │   │       │   └── sign-in.dto.ts
│   │   │       ├── guards
│   │   │       │   ├── index.ts
│   │   │       │   ├── jwt-auth.guard.ts
│   │   │       │   └── user-permission.guard.ts
│   │   │       └── index.ts
│   │   ├── permissions
│   │   │   ├── application
│   │   │   │   ├── find-all-permissions.use-case.ts
│   │   │   │   └── index.ts
│   │   │   ├── domain
│   │   │   │   ├── index.ts
│   │   │   │   ├── permission-errors.codes.ts
│   │   │   │   ├── permission-permissions.enum.ts
│   │   │   │   ├── permission-providers.enum.ts
│   │   │   │   ├── permission-repository.interface.ts
│   │   │   │   └── types
│   │   │   │       ├── create-permission.type.ts
│   │   │   │       ├── index.ts
│   │   │   │       ├── permission-filter.type.ts
│   │   │   │       └── permission.type.ts
│   │   │   └── infrastructure
│   │   │       ├── api
│   │   │       │   ├── find-all-permissions.controller.ts
│   │   │       │   └── index.ts
│   │   │       ├── index.ts
│   │   │       ├── permission.presenter.ts
│   │   │       ├── permissions.module.ts
│   │   │       ├── persistence
│   │   │       │   ├── index.ts
│   │   │       │   ├── permission-typeorm.repository.ts
│   │   │       │   └── permission.entity.ts
│   │   │       └── seeders
│   │   │           ├── index.ts
│   │   │           └── permissions.seeder.ts
│   │   ├── roles
│   │   │   ├── application
│   │   │   │   ├── delete-role.use-case.ts
│   │   │   │   ├── find-all-roles.use-case.ts
│   │   │   │   ├── find-by-role.use-case.ts
│   │   │   │   ├── index.ts
│   │   │   │   ├── store-role.use-case.ts
│   │   │   │   └── update-role.use-case.ts
│   │   │   ├── domain
│   │   │   │   ├── create-role.type.ts
│   │   │   │   ├── index.ts
│   │   │   │   ├── role-errors.codes.ts
│   │   │   │   ├── role-filter.type.ts
│   │   │   │   ├── role-permissions.enum.ts
│   │   │   │   ├── role-providers.enum.ts
│   │   │   │   ├── role-repository.interface.ts
│   │   │   │   ├── role.type.ts
│   │   │   │   └── update-role.type.ts
│   │   │   └── infrastructure
│   │   │       ├── api
│   │   │       │   ├── delete-role.controller.ts
│   │   │       │   ├── find-all-roles.controller.ts
│   │   │       │   ├── find-by-role.controller.ts
│   │   │       │   ├── index.ts
│   │   │       │   ├── store-role.controller.ts
│   │   │       │   └── update-role.controller.ts
│   │   │       ├── dto
│   │   │       │   ├── create-role.dto.ts
│   │   │       │   ├── index.ts
│   │   │       │   └── update-role.dto.ts
│   │   │       ├── index.ts
│   │   │       ├── persistence
│   │   │       │   ├── index.ts
│   │   │       │   ├── role-typeorm.repository.ts
│   │   │       │   └── role.entity.ts
│   │   │       ├── role.presenter.ts
│   │   │       ├── roles.module.ts
│   │   │       └── seeders
│   │   │           ├── index.ts
│   │   │           └── roles.seeder.ts
│   │   └── users
│   │       ├── application
│   │       │   ├── delete-user.use-case.ts
│   │       │   ├── find-all-users.use-case.ts
│   │       │   ├── find-by-user.use-case.ts
│   │       │   ├── index.ts
│   │       │   ├── store-user.use-case.ts
│   │       │   ├── update-user.use-case.ts
│   │       │   ├── use-cases
│   │       │   │   └── .gitkeep
│   │       │   └── user.policy.ts
│   │       ├── domain
│   │       │   ├── create-user-repository.type.ts
│   │       │   ├── create-user.type.ts
│   │       │   ├── index.ts
│   │       │   ├── update-user.type.ts
│   │       │   ├── user-errors.codes.ts
│   │       │   ├── user-filter.type.ts
│   │       │   ├── user-permissions.enum.ts
│   │       │   ├── user-providers.enum.ts
│   │       │   ├── user-repository.interface.ts
│   │       │   └── user.type.ts
│   │       └── infrastructure
│   │           ├── api
│   │           │   ├── delete-user.controller.ts
│   │           │   ├── find-all-users.controller.ts
│   │           │   ├── find-by-user.controller.ts
│   │           │   ├── index.ts
│   │           │   ├── store-user.controller.ts
│   │           │   └── update-user.controller.ts
│   │           ├── dto
│   │           │   ├── create-user.dto.ts
│   │           │   ├── index.ts
│   │           │   └── update-user.dto.ts
│   │           ├── index.ts
│   │           ├── persistence
│   │           │   ├── index.ts
│   │           │   ├── user-typeorm.repository.ts
│   │           │   └── user.entity.ts
│   │           ├── seeders
│   │           │   ├── dev-users.seeder.ts
│   │           │   ├── index.ts
│   │           │   └── prod-users.seeder.ts
│   │           ├── user.presenter.ts
│   │           └── users.module.ts
│   └── seed.ts
├── test
│   ├── app.e2e-spec.ts
│   └── jest-e2e.json
├── tsconfig.build.json
└── tsconfig.json

79 directories, 242 files
\n### Contenido de archivos clave ###

----- ./docker-compose.yml -----

services:
    pgsql:
        image: 'postgres:13'
        ports:
            - '${DB_PORT:-5432}:5432'
        environment:
            PGPASSWORD: '${DB_PASSWORD:-secret}'
            POSTGRES_DB: '${DB_DATABASE}'
            POSTGRES_USER: '${DB_USERNAME}'
            POSTGRES_PASSWORD: '${DB_PASSWORD:-secret}'
        volumes:
            - pgsql:/var/lib/postgresql/data
        networks:
            - app
        healthcheck:
            test: ["CMD", "pg_isready", "-q", "-d", "${DB_DATABASE}", "-U", "${DB_USERNAME}"]
            retries: 3
            timeout: 5s

networks:
    app:
        driver: bridge
volumes:
    pgsql:
        driver: local

----- ./tsconfig.build.json -----

{
  "extends": "./tsconfig.json",
  "exclude": ["node_modules", "test", "dist", "**/*spec.ts"]
}

----- ./README.md -----

<p align="center">
  <a href="http://nestjs.com/" target="blank"><img src="https://nestjs.com/img/logo-small.svg" width="200" alt="Nest Logo" /></a>
</p>

[circleci-image]: https://img.shields.io/circleci/build/github/nestjs/nest/master?token=abc123def456
[circleci-url]: https://circleci.com/gh/nestjs/nest

  <p align="center">A progressive <a href="http://nodejs.org" target="_blank">Node.js</a> framework for building efficient and scalable server-side applications.</p>
    <p align="center">
<a href="https://www.npmjs.com/~nestjscore" target="_blank"><img src="https://img.shields.io/npm/v/@nestjs/core.svg" alt="NPM Version" /></a>
<a href="https://www.npmjs.com/~nestjscore" target="_blank"><img src="https://img.shields.io/npm/l/@nestjs/core.svg" alt="Package License" /></a>
<a href="https://www.npmjs.com/~nestjscore" target="_blank"><img src="https://img.shields.io/npm/dm/@nestjs/common.svg" alt="NPM Downloads" /></a>
<a href="https://circleci.com/gh/nestjs/nest" target="_blank"><img src="https://img.shields.io/circleci/build/github/nestjs/nest/master" alt="CircleCI" /></a>
<a href="https://coveralls.io/github/nestjs/nest?branch=master" target="_blank"><img src="https://coveralls.io/repos/github/nestjs/nest/badge.svg?branch=master#9" alt="Coverage" /></a>
<a href="https://discord.gg/G7Qnnhy" target="_blank"><img src="https://img.shields.io/badge/discord-online-brightgreen.svg" alt="Discord"/></a>
<a href="https://opencollective.com/nest#backer" target="_blank"><img src="https://opencollective.com/nest/backers/badge.svg" alt="Backers on Open Collective" /></a>
<a href="https://opencollective.com/nest#sponsor" target="_blank"><img src="https://opencollective.com/nest/sponsors/badge.svg" alt="Sponsors on Open Collective" /></a>
  <a href="https://paypal.me/kamilmysliwiec" target="_blank"><img src="https://img.shields.io/badge/Donate-PayPal-ff3f59.svg"/></a>
    <a href="https://opencollective.com/nest#sponsor"  target="_blank"><img src="https://img.shields.io/badge/Support%20us-Open%20Collective-41B883.svg" alt="Support us"></a>
  <a href="https://twitter.com/nestframework" target="_blank"><img src="https://img.shields.io/twitter/follow/nestframework.svg?style=social&label=Follow"></a>
</p>
  <!--[![Backers on Open Collective](https://opencollective.com/nest/backers/badge.svg)](https://opencollective.com/nest#backer)
  [![Sponsors on Open Collective](https://opencollective.com/nest/sponsors/badge.svg)](https://opencollective.com/nest#sponsor)-->

## Description

[Nest](https://github.com/nestjs/nest) framework TypeScript starter repository.

## Installation

```bash
$ npm install
```

## Running the app

```bash
# development
$ npm run start

# watch mode
$ npm run start:dev

# production mode
$ npm run start:prod
```

## Test

```bash
# unit tests
$ npm run test

# e2e tests
$ npm run test:e2e

# test coverage
$ npm run test:cov
```

## Support

Nest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please [read more here](https://docs.nestjs.com/support).

## Stay in touch

- Author - [Kamil Myśliwiec](https://kamilmysliwiec.com)
- Website - [https://nestjs.com](https://nestjs.com/)
- Twitter - [@nestframework](https://twitter.com/nestframework)

## License

Nest is [MIT licensed](LICENSE).

----- ./tsconfig.json -----

{
  "ts-node": {
    "require": ["tsconfig-paths/register"]
  },
  "compilerOptions": {
    "module": "commonjs",
    "declaration": true,
    "removeComments": true,
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true,
    "allowSyntheticDefaultImports": true,
    "target": "ES2021",
    "sourceMap": true,
    "outDir": "./dist",
    "baseUrl": "./",
    "incremental": true,
    "skipLibCheck": true,
    "paths": {
      // Common
      "@common/helpers/*": ["./src/common/helpers/*"],
      "@common/adapters/configuration/*": [
        "./src/common/adapters/configuration/*"
      ],
      "@common/adapters/database/*": ["./src/common/adapters/database/*"],
      "@common/adapters/logger/*": ["./src/common/adapters/logger/*"],
      "@common/adapters/exception/*": ["./src/common/adapters/exception/*"],
      "@common/adapters/hash/*": ["./src/common/adapters/hash/*"],
      "@common/adapters/token/*": ["./src/common/adapters/token/*"],

      // Modules
      "@modules/permissions/*": ["./src/modules/permissions/*"],
      "@modules/roles/*": ["./src/modules/roles/*"],
      "@modules/users/*": ["./src/modules/users/*"],
      "@modules/auth/*": ["./src/modules/auth/*"]
    }
  }
}

----- ./package.json -----

{
  "name": "nest-clean-architecture",
  "version": "0.0.1",
  "description": "",
  "author": "",
  "private": true,
  "license": "UNLICENSED",
  "scripts": {
    "build": "nest build",
    "format": "prettier --write \"src/**/*.ts\" \"test/**/*.ts\"",
    "start": "nest start",
    "start:dev": "nest start --watch",
    "start:debug": "nest start --debug --watch",
    "start:prod": "node dist/main",
    "lint": "eslint \"{src,apps,libs,test}/**/*.ts\" --fix",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:cov": "jest --coverage",
    "test:debug": "node --inspect-brk -r tsconfig-paths/register -r ts-node/register node_modules/.bin/jest --runInBand",
    "test:e2e": "jest --config ./test/jest-e2e.json",
    "typeorm": "ts-node -r tsconfig-paths/register ./node_modules/typeorm/cli",
    "typeorm:migrate": "npm run typeorm -- migration:run -d ormconfig.ts",
    "typeorm:revert": "npm run typeorm -- migration:revert -d ormconfig.ts",
    "typeorm:drop": "npm run typeorm -- schema:drop -d ormconfig.ts",
    "typeorm:create": "npm run typeorm migration:create",
    "seed": "nest start --entryFile src/seed",
    "typeorm:migrate:fresh:seed": "npm run typeorm:drop && npm run typeorm:migrate && npm run seed"
  },
  "dependencies": {
    "@nestjs/common": "^11.0.10",
    "@nestjs/config": "^4.0.0",
    "@nestjs/core": "^11.0.10",
    "@nestjs/jwt": "^11.0.0",
    "@nestjs/passport": "^11.0.5",
    "@nestjs/platform-express": "^11.0.10",
    "@nestjs/typeorm": "^11.0.0",
    "bcrypt": "^5.1.1",
    "class-transformer": "^0.5.1",
    "class-validator": "^0.14.1",
    "passport": "^0.7.0",
    "passport-jwt": "^4.0.1",
    "pg": "^8.13.3",
    "reflect-metadata": "^0.2.2",
    "rxjs": "^7.8.2",
    "typeorm": "0.3.20",
    "uuid": "^11.1.0"
  },
  "devDependencies": {
    "@faker-js/faker": "^9.5.0",
    "@nestjs/cli": "^11.0.5",
    "@nestjs/schematics": "^11.0.1",
    "@nestjs/testing": "^11.0.10",
    "@types/bcrypt": "^5.0.2",
    "@types/express": "^5.0.0",
    "@types/jest": "29.5.14",
    "@types/node": "^22.13.5",
    "@types/passport-jwt": "^4.0.1",
    "@types/supertest": "^6.0.2",
    "@types/uuid": "^10.0.0",
    "@typescript-eslint/eslint-plugin": "^8.25.0",
    "@typescript-eslint/parser": "^8.25.0",
    "eslint": "^9.21.0",
    "eslint-config-prettier": "^10.0.2",
    "eslint-plugin-prettier": "^5.2.3",
    "jest": "29.7.0",
    "prettier": "^3.5.2",
    "source-map-support": "^0.5.21",
    "supertest": "^7.0.0",
    "ts-jest": "29.2.6",
    "ts-loader": "^9.5.2",
    "ts-node": "10.9.2",
    "tsconfig-paths": "4.2.0",
    "typescript": "5.7.3"
  },
  "jest": {
    "moduleFileExtensions": [
      "js",
      "json",
      "ts"
    ],
    "rootDir": "src",
    "testRegex": ".*\\.spec\\.ts$",
    "transform": {
      "^.+\\.(t|j)s$": "ts-jest"
    },
    "collectCoverageFrom": [
      "**/*.(t|j)s"
    ],
    "coverageDirectory": "../coverage",
    "testEnvironment": "node"
  }
}

----- ./.prettierrc -----

{
  "singleQuote": true,
  "trailingComma": "all"
}
----- ./.vscode/settings.json -----

{
  "[typescript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "editor.formatOnSave": true,
  "editor.tabSize": 2,
  "jest.runMode": "on-demand"
}

----- ./.vscode/extensions.json -----

{
  "recommendations": [
    "dbaeumer.vscode-eslint",
    "esbenp.prettier-vscode",
    "guilhermetheodoro.typescript-indexing"
  ]
}

----- ./ormconfig.ts -----

import { join } from 'path';
import { DataSource } from 'typeorm';
import * as dotenv from 'dotenv';

dotenv.config();

const migrationsPath = join(
  __dirname,
  'database',
  'migrations',
  '**',
  '*.{ts,js}',
);

export default new DataSource({
  type: 'postgres',
  host: process.env.DB_HOST,
  port: parseInt(process.env.DB_PORT),
  username: process.env.DB_USERNAME,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_DATABASE,
  logging: process.env.TYPEORM_LOGGING === 'true',
  synchronize: false,
  migrations: [migrationsPath],
});

----- ./.eslintrc.js -----

module.exports = {
  parser: '@typescript-eslint/parser',
  parserOptions: {
    project: 'tsconfig.json',
    tsconfigRootDir: __dirname,
    sourceType: 'module',
  },
  plugins: ['@typescript-eslint/eslint-plugin'],
  extends: [
    'plugin:@typescript-eslint/recommended',
    'plugin:prettier/recommended',
  ],
  root: true,
  env: {
    node: true,
    jest: true,
  },
  ignorePatterns: ['.eslintrc.js'],
  rules: {
    '@typescript-eslint/interface-name-prefix': 'off',
    '@typescript-eslint/explicit-function-return-type': 'off',
    '@typescript-eslint/explicit-module-boundary-types': 'off',
    '@typescript-eslint/no-explicit-any': 'off',
  },
};

----- ./nest-cli.json -----

{
  "$schema": "https://json.schemastore.org/nest-cli",
  "collection": "@nestjs/schematics",
  "sourceRoot": "src",
  "compilerOptions": {
    "deleteOutDir": true
  }
}

----- ./.gitignore -----

# Created by https://www.toptal.com/developers/gitignore/api/visualstudiocode,windows,linux,macos,node,dotenv
# Edit at https://www.toptal.com/developers/gitignore?templates=visualstudiocode,windows,linux,macos,node,dotenv

### dotenv ###
.env

### Linux ###
*~

# temporary files which can be created if a process still has a handle open of a deleted file
.fuse_hidden*

# KDE directory preferences
.directory

# Linux trash folder which might appear on any partition or disk
.Trash-*

# .nfs files are created when an open file is removed but is still being accessed
.nfs*

### macOS ###
# General
.DS_Store
.AppleDouble
.LSOverride

# Icon must end with two \r
Icon


# Thumbnails
._*

# Files that might appear in the root of a volume
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent

# Directories potentially created on remote AFP share
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

### macOS Patch ###
# iCloud generated files
*.icloud

### Node ###
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

### Node Patch ###
# Serverless Webpack directories
.webpack/

# Optional stylelint cache

# SvelteKit build / generate output
.svelte-kit

### VisualStudioCode ###
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
!.vscode/*.code-snippets

# Local History for Visual Studio Code
.history/

# Built Visual Studio Code Extensions
*.vsix

### VisualStudioCode Patch ###
# Ignore all local history of files
.history
.ionide

### Windows ###
# Windows thumbnail cache files
Thumbs.db
Thumbs.db:encryptable
ehthumbs.db
ehthumbs_vista.db

# Dump file
*.stackdump

# Folder config file
[Dd]esktop.ini

# Recycle Bin used on file shares
$RECYCLE.BIN/

# Windows Installer files
*.cab
*.msi
*.msix
*.msm
*.msp

# Windows shortcuts
*.lnk

# End of https://www.toptal.com/developers/gitignore/api/visualstudiocode,windows,linux,macos,node,dotenv
----- ./.env.example -----

APP_NAME=App
APP_ENV=dev
APP_DEBUG=true
APP_PORT=3000
APP_URL="http://localhost"

DB_TYPE=postgres
DB_HOST=localhost
DB_PORT=5432
DB_DATABASE=pos
DB_USERNAME=admin
DB_PASSWORD=admin
TYPEORM_LOGGING=true

JWT_SECRET=
JWT_EXPIRATION_TIME='1h'
----- ./.github/workflows/generate_context.yml -----

name: Actualizar Contexto y Crear Pull Request

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'contexto_repo.txt' # Evita que el workflow se dispare por cambios en este archivo

jobs:
  create-pull-request:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Clonar el repositorio
        uses: actions/checkout@v3

      - name: 📝 Generar lista de archivos y contenido (Filtrado)
        run: |
          echo "### Estructura de archivos y carpetas ###" > contexto_repo.txt
          tree -a -I '.git|node_modules|package-lock.json' >> contexto_repo.txt

          echo "\n### Contenido de archivos clave ###" >> contexto_repo.txt
          find . -type f \( \
            -name ".env.example" \
            -o -name "package.json" \
            -o -name "tsconfig.json" \
            -o -name "tsconfig.build.json" \
            -o -name "nest-cli.json" \
            -o -name "docker-compose.yml" \
            -o -name "ormconfig.ts" \
            -o -name ".eslintrc.js" \
            -o -name ".prettierrc" \
            -o -name ".gitignore" \
            -o -path "./.vscode/extensions.json" \
            -o -path "./.vscode/settings.json" \
            -o -path "./.github/workflows/generate_context.yml" \
            -o -name "README.md" \
            \) \
            -exec echo -e "\n----- {} -----\n" \; -exec cat {} \; >> contexto_repo.txt

      - name: 🔄 Crear nueva rama y hacer commit
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"

          # Generar un nombre único para la nueva rama
          BRANCH_NAME="update-context-$(date +%Y%m%d%H%M%S)"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV  # Guardar variable en el entorno

          git checkout -b $BRANCH_NAME
          git add contexto_repo.txt
          git commit -m "🔄 Actualización automática del contexto del repo" || exit 0
          git push origin $BRANCH_NAME
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔀 Crear Pull Request automático
        uses: repo-sync/pull-request@v2
        with:
          source_branch: ${{ env.BRANCH_NAME }} # Usar la rama generada
          destination_branch: 'main'
          pr_title: '🔄 Actualización automática del contexto del repo'
          pr_body: 'Este Pull Request fue generado automáticamente para actualizar `contexto_repo.txt` con la última estructura y contenido del repositorio.'
          pr_label: 'automated-pr'
          github_token: ${{ secrets.GITHUB_TOKEN }}
